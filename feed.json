{
    "version": "https://jsonfeed.org/version/1",
    "title": "Koi的学习之路",
    "subtitle": "",
    "icon": "https://iskoi.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://iskoi.github.io",
    "items": [
        {
            "id": "https://iskoi.github.io/reverseEngineering/pyinstaller/pyinstaller1/",
            "url": "https://iskoi.github.io/reverseEngineering/pyinstaller/pyinstaller1/",
            "title": "逆向实战-反编译Pyinstaller打包的exe并进行功能分析",
            "date_published": "2023-03-22T16:00:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近接触到一个程序，大概功能就是用激活码安装游戏，有点好奇想看看怎么实现的</p>\n<h1 id=\"一-查壳脱壳\"><a class=\"anchor\" href=\"#一-查壳脱壳\">#</a> 一、查壳脱壳</h1>\n<p>使用 <code>Detect It Easy</code>  进行查壳</p>\n<p>原来是用 <code>PyInstaller</code>  打包的，那就简单点，上反编译</p>\n<h1 id=\"二-反编译\"><a class=\"anchor\" href=\"#二-反编译\">#</a> 二、反编译</h1>\n<p>先使用 <code>PyInstaller Extractor</code>  工具解包</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/xxx\"></td><td><pre>python <span class=\"token punctuation\">.</span>\\pyinstxtractor<span class=\"token punctuation\">.</span>py <span class=\"token punctuation\">.</span>\\xxx<span class=\"token punctuation\">.</span>exe</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Processing <span class=\"token punctuation\">.</span>\\xxx<span class=\"token punctuation\">.</span>exe</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Pyinstaller version: 2<span class=\"token punctuation\">.</span>1+</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Python version: 3<span class=\"token punctuation\">.</span>10</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Length of package: 29268660 bytes</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Found 138 files in CArchive</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Beginning extraction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>please standby</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: pyiboot01_bootstrap<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: pyi_rth_inspect<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: pyi_rth_pyqt5<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: pyi_rth_pkgutil<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: pyi_rth_multiprocessing<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point: main<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Found 279 files in PYZ archive</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Successfully extracted pyinstaller archive: <span class=\"token punctuation\">.</span>\\xxx<span class=\"token punctuation\">.</span>exe</pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre>You can now use a python decompiler on the pyc files within the extracted directory</pre></td></tr></table></figure><p>新版 <code>PyInstaller Extractor</code>  会自动对 <code>pyc</code>  文件添加 <code>magic head</code> ，所以这里我们不用手动修改，也可以检查一下以防万一<br />\n然后安装 <code>uncompyle6</code>  反编译 <code>pyc</code>  文件</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/xxx\"></td><td><pre>pip install uncompyle6</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>cd <span class=\"token punctuation\">.</span>\\xxx<span class=\"token punctuation\">.</span>exe_extracted\\</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"D:/Koi/xxx/xxx.exe_extracted\"></td><td><pre>uncompyle6 <span class=\"token operator\">-</span>o main<span class=\"token punctuation\">.</span>py main<span class=\"token punctuation\">.</span>pyc</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>Unsupported Python version<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> decompilation</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># Unsupported bytecode in file main.pyc</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># Unsupported Python version, 3.10.0, for decompilation</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>main<span class=\"token punctuation\">.</span>pyc <span class=\"token operator\">--</span> decompiled 0 files: 0 okay<span class=\"token punctuation\">,</span> 0 failed</pre></td></tr></table></figure><p><code>uncompyle6</code>  不支持 <code>Python310</code> ，那试试 <code>pycdc</code>  反编译工具</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/xxx/xxx.exe_extracted\"></td><td><pre>pycdc main<span class=\"token punctuation\">.</span>pyc >main<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>Unsupported opcode: JUMP_IF_NOT_EXC_MATCH</pre></td></tr></table></figure><p><code>JUMP_IF_NOT_EXC_MATCH</code>  是最近刚添加的字节码， <code>pycdc</code>  尚未进行适配，因此生成的源码是不完整的，可以用 <code>pycdas</code>  反汇编，结合 <code>main.py</code>  来进行分析<br />\n但是呢， <code>JUMP_IF_NOT_EXC_MATCH</code>  字节码与 <code>try...except</code>  异常处理相关，我的目标是功能分析，所以要看的是正常无报错的代码，所以我们可以忽略这个错误<br />\n不过因为  <code>pycdc</code>  报错后会中断跳过当前函数，所以要对 <code>pycdc</code>  进行修改<br />\n打开 <code>pycdc</code>  的 <code>Github</code>  仓库利用 <code>Github</code>  的搜索功能，搜索 <code>Unsupported opcode</code> ，搜索到关键代码在 <code>ASTree.cpp</code>  当中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>YIELD_VALUE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                PycRef<span class=\"token operator\">&lt;</span>ASTNode<span class=\"token operator\">></span> value <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                curblock<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ASTReturn</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> ASTReturn<span class=\"token double-colon punctuation\">::</span>YIELD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>SETUP_ANNOTATIONS<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            variable_annotations <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>PRECALL_A<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>RESUME_A<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">/* We just entirely ignore this / no-op */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>CACHE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">/* These \"fake\" opcodes are used as placeholders for optimizing</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               certain opcodes in Python 3.11+.  Since we have no need for</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>               that during disassembly/decompilation, we can just treat these</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>               as no-ops. */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">case</span> Pyc<span class=\"token double-colon punctuation\">::</span>PUSH_NULL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unsupported opcode: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pyc</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OpcodeName</span><span class=\"token punctuation\">(</span>opcode <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cleanBuild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ASTNodeList</span><span class=\"token punctuation\">(</span>defblock<span class=\"token operator\">-></span><span class=\"token function\">nodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里用了<span class=\"blue\"> swtich...case...default</span> 语法，当 <code>switch</code>  的值与所有的 <code>case</code>  的值不相等时，就会运行 <code>default</code>  语句，所以这里我们要修改 <code>default</code>  之后的代码 <code>fprintf</code>  除外全部注释掉，然后让 <code>opcode</code>  出栈，从上下文分析可以发现 <code>opcode</code>  是存在 <code>stack</code>  里的，在 <code>fprintf</code>  的下一行写入<span class=\"blue\"> stack.pop ();</span> 重新编译得到 <code>pycdc.exe</code> ，重命名为 <code>pycdc1.exe</code>  和原版 <code>pycdc</code>  区分开，方便以后调用<br />\n使用 <code>pycdc1</code>  对 <code>main.pyc</code>  反编译，并找到关键函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_click_act</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            code <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lineEdit<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> code <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                msg_box <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">(</span>QMessageBox<span class=\"token punctuation\">.</span>Critical<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xe9\\x94\\x99\\xe8\\xaf\\xaf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xe8\\xaf\\xb7\\xe8\\xbe\\x93\\xe5\\x85\\xa5\\xe6\\xbf\\x80\\xe6\\xb4\\xbb\\xe7\\xa0\\x81'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                msg_box<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>lineEdit<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            self<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xe6\\xbf\\x80\\xe6\\xb4\\xbb\\xe4\\xb8\\xad'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            self<span class=\"token punctuation\">.</span>pushButton_2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xe4\\xbf\\xae\\xe5\\xa4\\x8d\\xe9\\x94\\x99\\xe8\\xaf\\xaf'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            self<span class=\"token punctuation\">.</span>pushButton<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            self<span class=\"token punctuation\">.</span>pushButton_2<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            self<span class=\"token punctuation\">.</span>work_thread <span class=\"token operator\">=</span> WorkThread<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            self<span class=\"token punctuation\">.</span>work_thread<span class=\"token punctuation\">.</span>trigger<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>after_process<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            self<span class=\"token punctuation\">.</span>work_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">except</span> setText <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>找到 <code>on_click_act</code>  函数，从函数名和代码可以明显看出，这是按下按钮后执行的函数，首先判断 <code>code</code>  是否为空，是则弹出窗口提示 &quot;请输入激活码&quot;，所以 <code>code</code>  就是激活码，接下来就是更新按钮和输入框的状态，然后调用 <code>WorkThread</code>  函数<br />\n从 <code>PYZ-00.pyz_extracted</code>  文件夹找到 <code>work_thread.pyc</code> ，用 <code>pycdc1</code>  反编译，仍然有<span class=\"pink\"> Unsupported opcode: JUMP_IF_NOT_EXC_MATCH</span> 报错，不管它，直接看代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''WorkThread'''</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    trigger <span class=\"token operator\">=</span> QtCore<span class=\"token punctuation\">.</span>pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> parent <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>WorkThread<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        temp <span class=\"token operator\">=</span> main_process<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>trigger<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    __classcell__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WorkThread <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>NODE<span class=\"token punctuation\">:</span><span class=\"token number\">27</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>WorkThread<span class=\"token punctuation\">,</span> <span class=\"token string\">'WorkThread'</span><span class=\"token punctuation\">,</span> QtCore<span class=\"token punctuation\">.</span>QThread<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main_process</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> xxxcore<span class=\"token punctuation\">.</span>query_game<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> result <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        depot_id_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>close_xxx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'manifest'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            depot_id_list <span class=\"token operator\">=</span> xxxcore<span class=\"token punctuation\">.</span>generate_manifest_vdf<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'appid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'manifest'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>generate_applist<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'appid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'dlcid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> depot_id_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>get_user32<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>code_add_1<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'exe_name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            xxxcore<span class=\"token punctuation\">.</span>code_add_1<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'family_sharing_code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> code<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            xxxcore<span class=\"token punctuation\">.</span>delete_code<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>start_xxx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        xxxcore<span class=\"token punctuation\">.</span>generate_shortcut<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'appid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'name_cn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'a'</span></pre></td></tr></table></figure><p>在主函数里，调用 <code>main_process</code>  函数并传递了 <code>code</code> ，在 <code>main_process</code>  函数声明 <code>result</code>  变量的值为 <code>xxxcore.query_game(code)</code> ，看来  <code>xxxcore</code>  就是我们要找的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">query_game</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    db <span class=\"token operator\">=</span> get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cursor <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT game_info.appid,dlcid,name_cn,url,exe_name,family_sharing_code,manifest FROM activation_code INNER JOIN game_info ON activation_code.appid = game_info.appid WHERE code = '%s'\"</span> <span class=\"token operator\">%</span> code</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        results <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> results <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            result <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'appid'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'dlcid'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'name_cn'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'exe_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'family_sharing_code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'manifest'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        e <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\xe7\\xbd\\x91\\xe7\\xbb\\x9c\\xe9\\x94\\x99\\xe8\\xaf\\xaf'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            e <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">del</span> e   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">del</span> e</pre></td></tr></table></figure><p>因为报错，后面的代码变得诡异，没关系，这不是关键代码<br />\n可以看到这个函数就是从 <code>mysql</code>  取出与游戏有关的信息，解读 <code>sql</code>  命令，查找 <code>dlcid</code> ,  <code>appid</code>  等数据，并且要满足 <code>game_info.appid</code>  和  <code>activation_code.appid</code>  相等，以及 <code>activation_code.code</code>  等于输入的 <code>code</code>  的条件<br />\n这里就省略看代码的过程，直接概括</p>\n<ul>\n<li>在 /config/config.vdf 的 <code>depot</code>  元素添加用于解密 <code>manifest</code>  的 <code>key</code></li>\n<li>获取作者在腾讯云存储的 <code>manifest</code>  文件，添加到 /depotcache/ 下</li>\n<li>获取 User32.dll (同上)，存放在程序根目录</li>\n<li>修改 /xxx.cfg 添加 <code>BootStrapperInhibitAll=enable</code> ，查了一下，这个参数用来阻止自动更新</li>\n<li>如果存在 /hid.dll，就删除</li>\n<li>删除 /appcache/ 下的所有文件，清除 <code>app</code>  缓存，可能是为了刷新仓库界面</li>\n<li>在 / Applist / 下 (如果没有就创建) 添加 <code>txt</code>  文件，文件名是有序的数字，如 &quot;0.txt&quot;,&quot;1.txt&quot;,&quot;3.txt&quot;，文件内容为 <code>appid</code> 、 <code>dlcid</code> 、 <code>manifest</code> ，一个文件只写一个 <code>id</code></li>\n</ul>\n",
            "tags": [
                "软件逆向工程",
                "逆向",
                "pyinstaller",
                "python"
            ]
        },
        {
            "id": "https://iskoi.github.io/Programming/cmake/cmake/",
            "url": "https://iskoi.github.io/Programming/cmake/cmake/",
            "title": "Cmake安装与使用",
            "date_published": "2023-03-09T16:00:00.000Z",
            "content_html": "<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p><a href=\"https://cmake.org/download/\">官方下载地址</a><br />\n根据自己系统和架构下载对应的包</p>\n<p>选择<span class=\"pink\"> Add CMake to the system PATH for the current user</span>，意思是只添加到用户环境变量，另一个就是添加到系统环境变量</p>\n<p>安装完成后，打开 <code>cmd</code>  或者 <code>Powershell</code> , 输入命令<span class=\"blue\"> cmake --version</span></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>D:/Koi/cmake</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake <span class=\"token operator\">--</span>version</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake version 3<span class=\"token punctuation\">.</span>26<span class=\"token punctuation\">.</span>0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMake suite maintained and supported by Kitware <span class=\"token punctuation\">(</span>kitware<span class=\"token punctuation\">.</span>com/cmake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>如上，没有报错即安装成功</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>这里用 <code>Pycdc</code>  作为示例</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi\"></td><td><pre>git clone https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com/zrax/pycdc<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>cd pycdc</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"D:/Koi/pycdc\"></td><td><pre>cmake <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>MSBuild pycdc<span class=\"token punctuation\">.</span>sln</pre></td></tr></table></figure><p>这里遇到几个坑，首先是输入<span class=\"blue\"> cmake .</span> 后显示</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/pycdc\"></td><td><pre>CMake Warning <span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span> at CMakeLists<span class=\"token punctuation\">.</span>txt:1 <span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>  cmake_minimum_required<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> should be called prior to this top-level project<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>  call<span class=\"token punctuation\">.</span>  Please see the cmake-commands<span class=\"token punctuation\">(</span>7<span class=\"token punctuation\">)</span> manual <span class=\"token keyword\">for</span> usage documentation of</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  both commands<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>This warning is <span class=\"token keyword\">for</span> project developers<span class=\"token punctuation\">.</span>  Use <span class=\"token operator\">-</span>Wno-dev to suppress it<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>意思是 <code>cmake_minimum_required</code>  函数不能在 <code>Project</code>  函数之后，编辑 CMakeLists.txt 将 <code>cmake_minimum_required</code>  改到第一行即可<br />\n第二个是找不到 <code>Visual Studio</code></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/pycdc\"></td><td><pre>CMake Error at CMakeLists<span class=\"token punctuation\">.</span>txt:3 <span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>  Generator</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>    Visual Studio 17 2022</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  could not find any instance of Visual Studio<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>Configuring incomplete<span class=\"token punctuation\">,</span> errors occurred!</pre></td></tr></table></figure><p>打开 <code>Visual Studio Installer</code> ，点击右边的修改按钮</p>\n<p>使用 <code>C++</code>  的桌面开发 和 <code>Visual Studio</code>  扩展开发 和 单个组件 中有关 <code>Cmake</code>  的都要选中</p>\n<p>也有人说要有 <code>VS17COMNTOOLS</code> VisualStudio 安装路径 \\2022\\Community\\Common7\\Tools 环境变量，但是这里我没有这个环境变量也可以正常编译，看个人情况吧<br />\n重新执行<span class=\"blue\"> cmake .</span></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"D:/Koi/pycdc\"></td><td><pre>cmake <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Building <span class=\"token keyword\">for</span>: Visual Studio 17 2022</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Selecting Windows SDK version 10<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>22000<span class=\"token punctuation\">.</span>0 to target Windows 10<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>19045<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> The C compiler identification is MSVC 19<span class=\"token punctuation\">.</span>35<span class=\"token punctuation\">.</span>32216<span class=\"token punctuation\">.</span>1</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> The CXX compiler identification is MSVC 19<span class=\"token punctuation\">.</span>35<span class=\"token punctuation\">.</span>32216<span class=\"token punctuation\">.</span>1</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting C compiler ABI info</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting C compiler ABI info <span class=\"token operator\">-</span> done</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Check <span class=\"token keyword\">for</span> working C compiler: D:<span class=\"token operator\">/</span>Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14<span class=\"token punctuation\">.</span>35<span class=\"token punctuation\">.</span>32215/bin/Hostx64/x64/cl<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span> skipped</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting C compile features</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting C compile features <span class=\"token operator\">-</span> done</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting CXX compiler ABI info</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting CXX compiler ABI info <span class=\"token operator\">-</span> done</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Check <span class=\"token keyword\">for</span> working CXX compiler: D:<span class=\"token operator\">/</span>Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14<span class=\"token punctuation\">.</span>35<span class=\"token punctuation\">.</span>32215/bin/Hostx64/x64/cl<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span> skipped</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting CXX compile features</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Detecting CXX compile features <span class=\"token operator\">-</span> done</pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Found PythonInterp: C:<span class=\"token operator\">/</span>Users/Koi/AppData/Local/Programs/Python/Python310/python<span class=\"token punctuation\">.</span>exe <span class=\"token punctuation\">(</span>found version <span class=\"token string\">\"3.10.7\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Configuring done <span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">.</span>6s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Generating done <span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">.</span>1s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre><span class=\"token operator\">--</span> Build files have been written to: D:<span class=\"token operator\">/</span>Koi/pycdc</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre>MSBuild pycdc<span class=\"token punctuation\">.</span>sln</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>MSBuild version 17<span class=\"token punctuation\">.</span>5<span class=\"token punctuation\">.</span>1+f6fdcf537 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">.</span>NET Framework</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre>在此解决方案中一次生成一个项目。若要启用并行生成，请添加<span class=\"token string\">\"-m\"</span>开关。</pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre>略</pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre>已完成生成项目“D:\\Koi\\pycdc\\ALL_BUILD<span class=\"token punctuation\">.</span>vcxproj”<span class=\"token punctuation\">(</span>默认目标<span class=\"token punctuation\">)</span>的操作。</pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"\"></td><td><pre>已完成生成项目“D:\\Koi\\pycdc\\ALL_BUILD<span class=\"token punctuation\">.</span>vcxproj<span class=\"token punctuation\">.</span>metaproj”<span class=\"token punctuation\">(</span>默认目标<span class=\"token punctuation\">)</span>的操作。</pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre>已完成生成项目“D:\\Koi\\pycdc\\pycdc<span class=\"token punctuation\">.</span>sln”<span class=\"token punctuation\">(</span>默认目标<span class=\"token punctuation\">)</span>的操作。</pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"\"></td><td><pre>已成功生成。</pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"\"></td><td><pre>    0 个警告</pre></td></tr><tr><td data-num=\"29\"></td><td data-command=\"\"></td><td><pre>    0 个错误</pre></td></tr><tr><td data-num=\"30\"></td><td data-command=\"\"></td><td><pre>已用时间 00:00:09<span class=\"token punctuation\">.</span>86</pre></td></tr></table></figure><p>编译成功无报错</p>\n",
            "tags": [
                "计算机程序设计",
                "Cmake",
                "编译"
            ]
        },
        {
            "id": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure3/datastructure3/",
            "url": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure3/datastructure3/",
            "title": "数据结构【逻辑结构篇】",
            "date_published": "2023-02-18T16:00:00.000Z",
            "content_html": "<h1 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h1>\n<p>栈是线性数据结构，元素在其中只能先进后出，就像一端封闭一端开放的圆筒形容器<br />\n最早进入的元素叫做栈底 <code>bottom</code> ，最后的元素叫做栈顶 <code>top</code> <br />\n 只有栈顶才能入栈 <code>push</code> 、出栈 <code>pop</code></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>栈的输出顺序与输入顺序相反，适合用于回溯，例如递归操作返回上一级递归、面包屑导航<br />\n<img loading=\"lazy\" src=\"https://s2.loli.net/2024/12/05/ey896rswNlhfuMj.png\" alt=\"\" /></p>\n<h1 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> 队列</h1>\n<p>队列也是线性数据结构，元素在其中只能先入先出，就像现实中的隧道<br />\n队列的出口端叫做队头 <code>front</code> ，入口端叫队尾 <code>rear</code> ，队尾指针指向的位置必须空出一位<br />\n元素只能在队尾入队 <code>enqueue</code> 、队头出队 <code>dequeue</code>  时间复杂度<span class=\"pink\"> O (1)</span></p>\n<h2 id=\"循环队列\"><a class=\"anchor\" href=\"#循环队列\">#</a> 循环队列</h2>\n<p>当队列使用数组实现时，不断进行入、出队操作，就会面临空间不足的情况，循环队列可以解决这个问题，并且不用扩容数组<br />\n只需将队尾放到数组的首位，重新利用先前出队的空间<br />\n当<span class=\"pink\"> (队尾下标 + 1) % 数组长度 = 队头下标</span>时，说明队列已满<br />\n<img loading=\"lazy\" src=\"https://s2.loli.net/2024/12/05/XIUA7SBrW9VNlCo.gif\" alt=\"\" /></p>\n<h2 id=\"双端队列\"><a class=\"anchor\" href=\"#双端队列\">#</a> 双端队列</h2>\n<h2 id=\"优先队列\"><a class=\"anchor\" href=\"#优先队列\">#</a> 优先队列</h2>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>队列的输出顺序和输入顺序相同，经常用于现实中的排队系统</p>\n<h1 id=\"散列表-哈希表\"><a class=\"anchor\" href=\"#散列表-哈希表\">#</a> 散列表 (哈希表)</h1>\n<p>散列表是 <code>hash</code>  结构，由 <code>Key</code>  和 <code>Value</code>  组成，通过对 <code>Key</code>  进行 <code>hash</code>  计算出 <code>Value</code>  在数组中的下标位置<br />\n<span class=\"pink\"> index = HashCode (Key) % Array.length</span></p>\n<h2 id=\"哈希冲突\"><a class=\"anchor\" href=\"#哈希冲突\">#</a> 哈希冲突</h2>\n<p>由于数组的长度是有限的，就会有 <code>hash</code>  冲突的情况，主要有两种方法解决这种问题</p>\n<p>开放寻址法：当写入的位置已经有元素时，往后寻找空位写入<br />\n链表法：每一个元素都是一个链表的头节点，只需要用 <code>next</code>  指针指向要被写入的冲突的元素即可（ <code>HashMap</code>  应用了此方法）</p>\n<h2 id=\"扩容\"><a class=\"anchor\" href=\"#扩容\">#</a> 扩容</h2>\n<p>既然使用数组实现，那么就会涉及到扩容问题，虽然链表法可以一直往下延伸，但这会大大影响效率，在 <code>HashMap</code>  中判断需要扩容的条件是<span class=\"pink\"> HashMap.Size &gt;= Capacity*LoadFactor</span>， <code>Capacity</code>  指 <code>HashMap</code>  当前长度， <code>LoadFactor</code>  指 <code>HashMap</code>  的负载因子，默认为<span class=\"pink\"> 0.75f</span> 和数组扩容一样，先创建原数组两倍的新数组，不过要重新进行 <code>hash</code>  计算，因为数组长度发生了变化，先前计算得出的下标已经不再适用于新数组</p>\n<h1 id=\"树\"><a class=\"anchor\" href=\"#树\">#</a> 树</h1>\n<p>树 <code>tree</code>  是<span class=\"pink\"> n (n&gt;=0)</span> 个节点的有限集。当<span class=\"pink\"> n=0</span> 时，称为空树<br />\n非空树有以下特点：</p>\n<p>有且仅有一个称为根的节点 <code>root</code> <br />\n 当<span class=\"pink\"> n&gt;1</span> 时，其余节点可分为<span class=\"pink\"> m (m&gt;0)</span> 个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树<br />\n没有孩子的节点是树的末端，称做叶子节点 <code>leaf</code> <br />\n 一个节点的上一级节点，是这个节点的父节点 <code>parent</code> ，从这个节点衍生出来的节点，是这个节点的孩子节点 <code>child</code> ，和这个节点同级，同一个父节点衍生出来的节点是这个节点的兄弟节点 <code>sibling</code> <br />\n 树的最大层级数，称为树的高度和深度</p>\n<h2 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<p>二叉树中的每一个节点最多能有两个孩子节点，也可以只有一个，或者没有。一个叫做左孩子 <code>leftChild</code> ，一个叫做右孩子 <code>rightChild</code> ，它们的顺序是固定和，如同名字一样</p>\n<p>满二叉树：一个二叉树的每一个非叶子节点都有两个孩子节点，并且所有叶子节点都在同一层级<br />\n完全二叉树：完全二叉树的所有节点和同样高度的满二叉树的节点位置相同，仅要求最后一个节点之前的节点满分支即可</p>\n",
            "tags": [
                "计算机程序设计",
                "数据结构与算法",
                "数据结构"
            ]
        },
        {
            "id": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure2/datastructure2/",
            "url": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure2/datastructure2/",
            "title": "数据结构【物理结构篇】",
            "date_published": "2023-02-18T05:00:00.000Z",
            "content_html": "<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>数组在内存中是按顺序存储的，数组内每个元素都有一个单独的下标，在查找元素时只需要给出对应的下标即可，下标就是一个数字，从第一个元素为 0 逐次增加，这叫随机读取，读取的时间复杂度只有<span class=\"pink\"> O (1)</span><br />\n 数组的长度在创建数组的时候就固定了，所以当长度不够时就只能再创建一个更长的数组再将元素一个个复制过去（Java 是这样的，在 JavaScript 中是动态的可随意增减）扩容的时间复杂度是<span class=\"pink\"> O (n)</span><br />\n 由于每个元素是固定下标，所以在数组中作中间插入的操作是繁琐的，需要把要插入的位置的元素包括在这之后的元素一个个往后移，中间删除操作往前移，时间复杂度都是<span class=\"pink\"> O (n)</span><br />\n 如果没有顺序要求，中间删除操作可以将最后一个元素复制到要删除元素的位置，然后删除最后一个元素，这样时间复杂度只有<span class=\"pink\"> O (2)</span></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>数组的随机读取能力强但插入、删除能力会导致大量元素移动，因此数组适合在读操作多，写操作少的情况使用</p>\n<h1 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h1>\n<h2 id=\"单向链表\"><a class=\"anchor\" href=\"#单向链表\">#</a> 单向链表</h2>\n<p>每一个节点由 <code>data</code> 、 <code>next</code>  组成， <code>data</code>  为存储的数据， <code>next</code>  指向下一个节点，头节点为 <code>head</code> ，尾部节点为 <code>last</code>  且 <code>next</code>  指向 <code>null</code> ，因此只能做向下读取的操作<br />\n链表是随机存储的 (所以需要指针)，在做查找的操作时只能一个一个节点往下找，时间复杂度为 [O (n)].{pink}，但它的长度是动态的<br />\n头部插入：将新节点的 <code>next</code>  指向第一个节点，然后更新 <code>head</code>  为新节点<br />\n中间插入：将新节点的 <code>next</code>  指向下一个节点，将上一个节点的 <code>next</code>  指向新节点<br />\n头部删除：将 <code>head</code>  更新为第二个节点（Java 特性会删除未被使用的数据）<br />\n中间删除：将上一个节点的 <code>next</code>  指向下一个节点<br />\n尾部删除：将倒数第二个节点的 <code>next</code>  指向 <code>null</code></p>\n<h2 id=\"双向链表\"><a class=\"anchor\" href=\"#双向链表\">#</a> 双向链表</h2>\n<p>和单向链表唯有一点不同，一个节点多包含了 <code>prev</code> ，用于指向上一个节点</p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>如果忽略查找的过程，链表在插入、删除方面上更为灵活，链表适合用于在尾部频繁插入、删除的情况下</p>\n",
            "tags": [
                "计算机程序设计",
                "数据结构与算法",
                "数据结构"
            ]
        },
        {
            "id": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure1/datastructure1/",
            "url": "https://iskoi.github.io/Programming/datastructureAlgorithms/datastructure1/datastructure1/",
            "title": "数据结构【介绍篇】",
            "date_published": "2023-02-18T04:00:00.000Z",
            "content_html": "<h1 id=\"物理结构\"><a class=\"anchor\" href=\"#物理结构\">#</a> 物理结构</h1>\n<p>存储在内存中的就是物理结构</p>\n<h1 id=\"顺序存储结构\"><a class=\"anchor\" href=\"#顺序存储结构\">#</a> 顺序存储结构</h1>\n<p>顺序结构是将连续的数据依次存储在连续的内存中</p>\n<h1 id=\"链式存储结构\"><a class=\"anchor\" href=\"#链式存储结构\">#</a> 链式存储结构</h1>\n<p>链式结构是将数据存储在任意的内存中，可以是连续的，也可以是不连续的，每个元素都有指针域和数据域</p>\n<h1 id=\"索引存储结构\"><a class=\"anchor\" href=\"#索引存储结构\">#</a> 索引存储结构</h1>\n<p>与链式结构不同的是索引结构没有指针，但创建了索引表存储数据在内存中的地址，对内存消耗大，但查找速度快</p>\n<h1 id=\"索引顺序结构\"><a class=\"anchor\" href=\"#索引顺序结构\">#</a> 索引顺序结构</h1>\n<p>每个数据在内存中是连续的</p>\n<h1 id=\"散列结构hash-结构\"><a class=\"anchor\" href=\"#散列结构hash-结构\">#</a> 散列结构（hash 结构）</h1>\n<p>通过计算决定数据在内存中的位置</p>\n<h1 id=\"逻辑结构\"><a class=\"anchor\" href=\"#逻辑结构\">#</a> 逻辑结构</h1>\n<p>逻辑结构就是数据之间的关系，一个逻辑结构可以用两种以上的物理结构实现</p>\n<h1 id=\"线性结构\"><a class=\"anchor\" href=\"#线性结构\">#</a> 线性结构</h1>\n<p>有唯一的首、尾元素，除了首、尾元素，其他元素都是首尾相接的，是一对一的关系，容易遍历，比如栈、队列、双队列、循环队列、一维数组等</p>\n<h1 id=\"非线性结构\"><a class=\"anchor\" href=\"#非线性结构\">#</a> 非线性结构</h1>\n<p>非线性结构是一对多或者多对一的关系，需要多次运行才能完全遍历，比如二维数组、多维数组、广义表、树、二叉树等</p>\n<h1 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h1>\n<p>各个数据之间没有任何关系</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>逻辑结构是面向问题的，物理结构是面向计算机的，其目的是将数据及其逻辑关系存储在内存中</p>\n",
            "tags": [
                "计算机程序设计",
                "数据结构与算法",
                "数据结构"
            ]
        }
    ]
}